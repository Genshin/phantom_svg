
require 'rexml/document'

module Phantom
  module SVG
    module Parser
      class SVGWriter
        def initialize(path = nil, object = nil)
          write(path, object)
        end

        def write(path, object)
          @root = REXML::Document.new
          @root << REXML::XMLDecl.new('1.0', 'UTF-8')
          @root << REXML::Comment.new(' Generated by phantom_svg. ')

          if object.is_a?(Base)     then  parse_animation_svg(object)
          elsif object.is_a?(Frame) then  parse_svg(object)
          else                            return
          end

          file = File.open(path, 'w')
          @root.write(file, 2)
          file.flush
        end

        private

        def parse_animation_svg(base)
          # Header.
          svg = @root.add_element('svg', {
            'id' => 'phantom_svg',
            'width' => base.width.is_a?(String) ? base.width : base.width.to_i.to_s + 'px',
            'height' => base.height.is_a?(String) ? base.height : base.height.to_i.to_s + 'px',
            'version' => '1.1'
          })
          svg.add_namespace('http://www.w3.org/2000/svg')
          svg.add_namespace('xlink', 'http://www.w3.org/1999/xlink')

          defs = svg.add_element('defs')

          # Images.
          REXML::Comment.new(' Images. ', defs)
          base.frames.each_with_index do |frame, i|
            defs_svg = defs.add_element('svg', {
              'id' => "frame#{i}",
              'viewBox' => frame.viewbox.to_s
            })
            frame.namespaces.each do |key, val|
              case key
              when 'xmlns'  then  defs_svg.add_namespace(val)
              else                defs_svg.add_namespace(key, val)
              end
            end

            frame.surface.each do |surface|
              defs_svg.add_element(surface)
            end
          end

          # Animation.
          REXML::Comment.new(' Animation. ', defs)
          symbol = defs.add_element('symbol', {
            'id' => 'animation'
          })
          begin_text = "0s;frame#{base.frames.length - 1}_anim.end"
          base.frames.each_with_index do |frame, i|
            next if i == 0 && base.skip_first

            use = symbol.add_element('use', {
              'xlink:href' => "#frame#{i}",
              'visibility' => 'hidden'
            })
            use.add_element('set', {
              'id' => "frame#{i}_anim",
              'attributeName' => 'visibility',
              'to' => 'visible',
              'begin' => begin_text,
              'dur' => "#{frame.duration}s"
            })
            begin_text = "frame#{i}_anim.end"
          end

          # Show controll.
          REXML::Comment.new(' Main control. ', svg)
          total_duration = 0.0
          base.frames.each do |frame|
            total_duration += frame.duration
          end
          svg.add_element('animate', {
            'id' => 'controller',
            'begin' => '0s',
            'dur' => "#{total_duration}s",
            'repeatCount' => base.loops.to_i == 0 ? 'indefinite' : base.loops.to_s
          })
          use = svg.add_element('use', {
            'xlink:href' => '#frame0'
          })
          use.add_element('set', {
            'attributeName' => 'xlink:href',
            'to' => '#animation',
            'begin' => 'controller.begin'
          })
          use.add_element('set', {
            'attributeName' => 'xlink:href',
            'to' => "#frame#{base.frames.length - 1}",
            'begin' => 'controller.end'
          })
        end

        def parse_svg(frame)
          svg = @root.add_element('svg', {
            'width' => frame.width.is_a?(String) ? frame.width : frame.width.to_i.to_s + 'px',
            'height' => frame.height.is_a?(String) ? frame.height : frame.height.to_i.to_s + 'px',
            'viewBox' => frame.viewbox.to_s,
            'version' => '1.1'
          })
          frame.namespaces.each do |key, val|
            case key
            when 'xmlns'  then  svg.add_namespace(val)
            else                svg.add_namespace(key, val)
            end
          end
          frame.surface.each do |element|
            svg.add_element(element)
          end
        end
      end # class SVGWriter
    end # module Parser
  end # module SVG
end # module Phantom
